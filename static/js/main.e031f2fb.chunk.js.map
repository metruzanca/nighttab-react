{"version":3,"sources":["styles/theme.ts","components/Bookmark/styles.ts","components/Bookmark/LinkItem.tsx","contexts/Editing.tsx","lib/persistance.ts","contexts/Config.tsx","hooks/useContructor.ts","components/Group/styles.ts","components/Debug/Debug.tsx","components/Group/Group.tsx","app/index.tsx","index.tsx"],"names":["theme","Wrapper","styled","div","Front","a","Icon","DisplayName","p","Back","Url","Control","editing","Drag","MoveLeft","button","MoveRight","Edit","Delete","LinkItem","href","EditingContext","createContext","setEditing","EditingProvider","children","useState","Provider","value","Persistance","type","save","data","localStorage","setItem","JSON","stringify","error","console","load","instanceStr","getItem","parse","Component","ConfigContext","config","ConfigProvider","persist","instance","useRef","callback","firstExecution","current","useConstructor","nighttab","Header","Name","h1","MoveUp","MoveDown","Body","Group","items","name","openAll","show","text","map","itemProps","Fragment","log","uuid","props","Consumer","DefaultStyles","createGlobalStyle","App","useContext","bookmarks","process","groupProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e031f2fb.chunk.js","sourcesContent":["export const theme = {\n  borderRadius: \".25em\",\n  linkItemWidth: \"11em\",\n  linkItemHeight: \"10em\",\n  rootFontSize: \"16px\",\n}","import styled from \"styled-components\";\nimport { theme } from \"styles\";\n\nexport const Wrapper = styled.div`\n  background-color: #413d69;\n  color: white;\n  & > a:visited {\n    color: lightblue;\n  }\n  /* Width and height wasn't defined here in the original, as it was using grid.\n  I placed this here for initial development. Should be removed later */\n  width: ${theme.linkItemWidth};\n  height: ${theme.linkItemHeight};\n\n  &:hover {\n    transform: scale(1.05);\n  }\n\n  margin: 1em;\n`\n\nexport const Front = styled.a`\n\n`\n\nexport const Icon = styled.a`\n\n`\n\nexport const DisplayName = styled.p`\n\n`\n\nexport const Back = styled.div`\n\n`\n\nexport const Url = styled.div`\n\n`\n\nexport type ControlProps = {\n  editing: boolean\n}\n\nexport const Control = styled.div<ControlProps>`\n  display: ${p => p.editing ? \"flex\" : \"none\"};\n  flex-wrap: wrap;\n`\n\nexport const Drag = styled.div`\n  flex-grow: 1;\n`\n\nexport const MoveLeft = styled.button`\n  flex-basis: 30%;\n  height: 30px;\n\n`\n\nexport const MoveRight = styled.button`\n  flex-basis: 30%;\n  height: 30px;\n\n`\n\n\nexport const Edit = styled.button`\n  height: 30px;\n  width: 50%;\n  border-bottom-left-radius: ${theme.borderRadius};\n`\n\nexport const Delete = styled.button`\n  height: 30px;\n  width: 50%;\n  border-bottom-right-radius: ${theme.borderRadius};\n`","import React from \"react\"\nimport {\n  Back,\n  Control,\n  Delete,\n  DisplayName,\n  Drag,\n  Edit,\n  Front,\n  Icon,\n  MoveLeft,\n  MoveRight,\n  Url,\n  Wrapper,\n} from \"./styles\"\n\ntype Props = {\n  editing: boolean\n}\n\nexport const LinkItem: React.FC<Props> = ({\n  editing = false,\n}) => {\n\n  return (\n    <Wrapper>\n      <Front href=\"\">\n        <div>\n          <Icon></Icon>\n          <DisplayName></DisplayName>\n        </div>\n      </Front>\n      <Back>\n        <Url>\n          <p></p>\n        </Url>\n        <Control editing={editing}>\n          <MoveLeft></MoveLeft>\n          <Drag></Drag>\n          <MoveRight></MoveRight>\n          <Edit></Edit>\n          <Delete></Delete>\n        </Control>\n      </Back>\n    </Wrapper>\n  )\n}","import { createContext, useState } from \"react\";\n\ninterface EditingContextProps {\n  editing: boolean\n  setEditing: (editing:boolean) => void\n}\n\nexport const EditingContext = createContext<EditingContextProps>({\n  editing: false,\n  setEditing: () => {}\n})\nexport const EditingProvider: React.FC = ({children}) => {\n  const [editing, setEditing] = useState(false)\n\n  return (\n    <EditingContext.Provider value={{editing, setEditing}}>\n      {children}\n    </EditingContext.Provider>\n  )\n}\n\nexport interface Editable {\n  editing: boolean\n}\n\nexport function withEditing<T extends object>(Component:React.FC<T>) {\n  const EditableComponent:React.FC<T & Editable> = (props) =>  (\n    <EditingContext.Consumer>\n      {({editing}) => <Component editing={editing} {...props as T}/>}\n    </EditingContext.Consumer>\n  )\n  return EditableComponent\n}","import { Instance } from \"types\"\n\n// TODO give this a better name\ntype PersistanceType =| \"localstorage\" | \"selfhosted\" | \"nighttab-servers\"\n\nexport interface Persistance {\n  save: (data: object) => void\n  load: () => Instance\n}\n\n// Kind of like Dependency Injection, but more \"Dependency Selection\".\n// This probably needs to be changed to be more flexible\n// This feels like a codesmell but idk how to achieve DI in js in a way\n// to not require rebuilding the app to change the Persistance object\n// It might be that we'll need a persistance.js file to be in as-is in the final bundle\n// and provide a series of persistance.js files that can be swapped in.\n// This might get messy.\nexport function Persistance(type:PersistanceType): Persistance{\n  switch(type){\n    default:\n    case \"localstorage\": return {\n      save: (data) => {\n        try {\n          localStorage.setItem(\"nighttab\", JSON.stringify(data))\n        } catch (error) {\n          console.error(error)\n          // handle telling user maybe? Or try again? This shouldn't ever fail...\n          //...unless their config is bigger than 5MB (5000000 chars)\n        }\n      },\n      //@ts-ignore //TODO need to make load return a valid instance\n      load: () => {\n        const instanceStr = localStorage.getItem(\"nighttab\")\n        if (instanceStr) {\n          // TODO potentially trycatch parsing for \"corrupted\" config\n          return <Instance>JSON.parse(instanceStr)\n        } else {\n          // TODO handle creating new default config\n        }\n      },\n    }\n    // Communicates with our servers, once we get ssr working.\n    case \"nighttab-servers\": return {\n      save: (data) => {\n        \n      },\n      //@ts-ignore //TODO need to make load return a valid instance\n      load: () => {\n\n      },\n    }\n    // Make this communicate with a specific API thats well documented.\n    case \"selfhosted\": return {\n      save: (data) => {\n        \n      },\n      //@ts-ignore //TODO need to make load return a valid instance\n      load: () => {\n\n      },\n    }\n  }\n}","import { useConstructor } from \"hooks\";\nimport { Persistance } from \"lib\";\nimport { createContext, useRef } from \"react\";\nimport { Instance } from \"types\";\n\n\ninterface ConfigContext {\n  config: Instance\n  save: (data:object) => void\n}\n\nexport const ConfigContext = createContext<ConfigContext>({\n  // @ts-ignore This temporary value doesn't exist long enough\n  // to justify making load have a valid value\n  config: {/* Valid instance goes here*/},\n  save: () => {}\n})\nexport const ConfigProvider: React.FC = ({children}) => {\n  // NB: Both Persistance, useConstructor are syncronous and the value is stored in a ref\n  //     resulting this logic only excuting on app load. \n  const persist = Persistance(\"localstorage\")\n  const instance = useRef<Instance>()\n  useConstructor(() => {\n    const nighttab = persist.load()\n    instance.current = nighttab\n  })\n\n  if(!instance){\n    // instance.current = new Instance()\n    // This path shouldn't even be necessary as load's job is to load\n    // or create a new Instance if one is not found\n  }\n\n  return (\n    <ConfigContext.Provider value={{\n      //@ts-ignore Remove this ignore once creating a new nighttab instance has been done\n      config: instance.current,\n      save: persist.save,\n    }}>\n      {children}\n    </ConfigContext.Provider>\n  )\n}","// The MIT License - Copyright (c) 2021 Samuele Zanca\n// https://github.com/metruzanca/react-hooks\n\nimport { useRef } from \"react\";\n\nexport function useConstructor(callback = () =>  {}) {\n  const firstExecution = useRef(true)\n  if(firstExecution.current){\n    firstExecution.current = false\n    callback()\n  }\n}\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nexport const Header = styled.div`\n\n`\n\nexport const Name = styled.h1`\n  \n`\n\nexport const Control = styled.div`\n  \n`\n\nexport const MoveUp = styled.button`\n  \n`\n\nexport const Drag = styled.div`\n  \n`\n\nexport const MoveDown = styled.button`\n  \n`\n\nexport const Edit = styled.button`\n  \n`\n\nexport const Delete = styled.button`\n  \n`\n\nexport const Body = styled.div`\n  display: grid;\n`","import { EditingContext } from \"contexts\"\nimport { Persistance } from \"lib\"\nimport React, { useContext } from \"react\"\nimport styled from \"styled-components\"\n\nimport devconfig from './devconfig.json'\n\ntype Props = {}\n\nconst Wrapper = styled.div`\n  background-color: #302929;\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: .5em;\n  display: flex;\n  flex-direction: column;\n`\n\nconst Button = styled.button`\n  background-color: #000000;\n  color: red;\n  padding: .5em;\n  margin: .4em 0;\n  border-radius: .5em;\n  &:hover{\n    background-color: #1f1f1f;\n  }\n  cursor: pointer;\n`\n\nconst H1 = styled.div`\n  background-color: #302929;\n  color: red;\n  margin-bottom: .5em;\n`\n\nexport const Debug: React.FC<Props> = ({}) => {\n  const {setEditing, editing} = useContext(EditingContext)\n  const handleToggleEdit =  () => setEditing(!editing)\n  const handleInjectConfig = () => Persistance(\"localstorage\").save(devconfig)\n  return (\n    <Wrapper>\n      <H1>Debug Tools</H1>\n      <Button onClick={handleToggleEdit}>\n        Toggle Edit Mode\n      </Button>\n      <Button onClick={handleInjectConfig}>\n        Inject NightTab Dev Config\n      </Button>\n    </Wrapper>\n  )\n}","import React from \"react\"\nimport { v4 as uuid } from 'uuid';\n\nimport {BookmarkGroup} from 'types'\nimport { LinkItem } from \"components\"\n\nimport {\n  Body,\n  Control,\n  Header,\n  Name,\n  Wrapper,\n  MoveUp,\n  Drag,\n  MoveDown,\n  Edit,\n  Delete,\n} from \"./styles\"\nimport { withEditing, Editable } from \"contexts\";\n\n\n// TODO how do I do this without declaring an interface like\ninterface Props extends BookmarkGroup, Editable {}\n\nexport const Group = withEditing<Props>(({\n  items,\n  name,\n  openAll,\n  editing,\n}) => {\n\n  return (\n    <Wrapper>\n      <Header>\n        <Control>\n          <MoveUp/>\n          <Drag/>\n          <MoveDown/>\n          <Edit/>\n          <Delete/>\n        </Control>\n        {/* @zombiefox, this is a great example of where we can do things directly\n            via react instead of using name.show to set a display: none\n        */}\n        {name.show && <Name>{name.text}</Name>}\n      </Header>\n      <Body>\n        {items.map(itemProps => \n          <React.Fragment key={uuid()}>\n            {console.log(\"item\", itemProps)}\n            <LinkItem editing={editing} key={uuid()} {...itemProps}/>\n          </React.Fragment>\n        )}\n      </Body>\n    </Wrapper>\n  )\n})","import React, { useContext } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { v4 as uuid } from 'uuid';\n\nimport { Debug, Group } from 'components';\nimport { ConfigContext, EditingContext } from 'contexts';\nimport { theme } from 'styles';\n\nconst DefaultStyles = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n  }\n\n  button {\n    border: none;\n  }\n  /* Temporary dark mode*/\n  body {\n    background-color: black;\n  }\n\n  :root {\n    font-size: ${theme.rootFontSize};\n  }\n\n  *, ::after, ::before {\n    box-sizing: border-box;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    color: white;\n  }\n`\n\n\nfunction App() {\n  const {editing} = useContext(EditingContext)\n  const {config} = useContext(ConfigContext)\n  console.log(config.bookmarks);\n  \n  return (\n    <>\n      <DefaultStyles/>\n      {process.env.NODE_ENV === 'development' && <Debug/>}\n      {config.bookmarks.map(groupProps =>\n        <Group key={uuid()} {...groupProps} editing={editing}/>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'app';\nimport { EditingProvider, ConfigProvider } from 'contexts';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConfigProvider>\n      <EditingProvider>\n        <App />\n      </EditingProvider>\n    </ConfigProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}